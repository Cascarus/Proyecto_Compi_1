
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.*;
import java.util.ArrayList;
import Lista.*;
import Objetos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class A_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public A_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public A_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public A_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\060\006\000\002\060" +
    "\007\000\002\060\007\000\002\060\007\000\002\060\007" +
    "\000\002\061\005\000\002\061\004\000\002\061\004\000" +
    "\002\061\004\000\002\063\005\000\002\063\006\000\002" +
    "\062\010\000\002\062\011\000\002\062\006\000\002\062" +
    "\005\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\054\004\000\002" +
    "\054\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\024\003\000\002\050\004\000\002" +
    "\050\003\000\002\064\005\000\002\064\010\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\005\003\000\002\006\005\000\002\007\005\000" +
    "\002\070\006\000\002\066\004\000\002\066\003\000\002" +
    "\067\005\000\002\067\005\000\002\067\005\000\002\071" +
    "\013\000\002\071\013\000\002\074\006\000\002\074\011" +
    "\000\002\056\004\000\002\056\003\000\002\056\003\000" +
    "\002\073\005\000\002\073\003\000\002\057\004\000\002" +
    "\057\003\000\002\057\003\000\002\072\005\000\002\072" +
    "\005\000\002\072\003\000\002\072\005\000\002\072\005" +
    "\000\002\055\004\000\002\055\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\065\005\000\002\065" +
    "\004\000\002\010\005\000\002\015\004\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\006\000\002" +
    "\075\005\000\002\053\005\000\002\053\003\000\002\025" +
    "\003\000\002\021\011\000\002\026\007\000\002\026\003" +
    "\000\002\027\003\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\030\003\000\002\030\004\000\002\031\004" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\020\011\000\002" +
    "\033\003\000\002\033\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\003\003\000\002\003\003" +
    "\000\002\012\003\000\002\012\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\006\037\004\164\005\001\002\000\010\003" +
    "\011\040\012\164\370\001\002\000\004\037\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\006\003\011\040\012\001\002\000\006\042\366\057\367" +
    "\001\002\000\006\041\357\060\356\001\002\000\004\042" +
    "\014\001\002\000\006\024\017\140\020\001\002\000\004" +
    "\057\016\001\002\000\004\002\ufffc\001\002\000\030\043" +
    "\053\044\042\045\064\046\045\047\061\050\052\051\047" +
    "\062\352\077\037\146\055\164\044\001\002\000\004\010" +
    "\021\001\002\000\024\151\031\152\032\153\023\154\026" +
    "\155\024\156\034\157\030\162\025\163\027\001\002\000" +
    "\004\024\035\001\002\000\004\024\uffee\001\002\000\004" +
    "\024\uffec\001\002\000\034\012\uff87\022\uff87\024\uff87\025" +
    "\uff87\027\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87" +
    "\036\uff87\142\uff87\143\uff87\001\002\000\004\024\uffed\001" +
    "\002\000\034\012\uff88\022\uff88\024\uff88\025\uff88\027\uff88" +
    "\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\142" +
    "\uff88\143\uff88\001\002\000\004\024\uffea\001\002\000\004" +
    "\024\ufff0\001\002\000\004\024\uffef\001\002\000\004\024" +
    "\ufff1\001\002\000\004\024\uffeb\001\002\000\030\043\053" +
    "\044\042\045\064\046\045\047\061\050\052\051\047\062" +
    "\041\077\037\146\055\164\044\001\002\000\032\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\062" +
    "\uffe2\063\uffe2\077\uffe2\146\uffe2\164\uffe2\001\002\000\044" +
    "\026\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\062\uffd4\063\uffd4\073\uffd4\074\uffd4\075\uffd4" +
    "\076\uffd4\077\uffd4\146\uffd4\164\uffd4\001\002\000\032\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\062\uffe1\063\uffe1\077\uffe1\146\uffe1\164\uffe1\001\002\000" +
    "\006\057\ufff5\164\ufff5\001\002\000\006\026\340\141\337" +
    "\001\002\000\032\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\051\uffde\062\uffde\063\uffde\077\uffde\146\uffde" +
    "\164\uffde\001\002\000\050\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\055\uffdd\056\uffdd\062\uffdd\063\uffdd\071\uffdd\072\uffdd\077" +
    "\uffdd\146\uffdd\164\uffdd\001\002\000\004\026\335\001\002" +
    "\000\030\043\053\044\042\045\064\046\045\047\061\050" +
    "\052\051\047\062\334\077\037\146\055\164\044\001\002" +
    "\000\006\024\262\107\263\001\002\000\032\043\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\062\uffe0" +
    "\063\uffe0\077\uffe0\146\uffe0\164\uffe0\001\002\000\032\043" +
    "\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\062\uffe7\063\uffe7\077\uffe7\146\uffe7\164\uffe7\001\002\000" +
    "\006\142\243\143\242\001\002\000\030\043\053\044\042" +
    "\045\064\046\045\047\061\050\052\051\047\063\237\077" +
    "\037\146\055\164\044\001\002\000\032\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\062\uffe3\063" +
    "\uffe3\077\uffe3\146\uffe3\164\uffe3\001\002\000\012\110\131" +
    "\112\133\150\122\162\123\001\002\000\032\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\062\uffe4" +
    "\063\uffe4\077\uffe4\146\uffe4\164\uffe4\001\002\000\032\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\062\uffe6\063\uffe6\077\uffe6\146\uffe6\164\uffe6\001\002\000" +
    "\032\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\062\uffe8\063\uffe8\077\uffe8\146\uffe8\164\uffe8\001" +
    "\002\000\010\104\072\105\067\106\070\001\002\000\032" +
    "\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\062\uffdf\063\uffdf\077\uffdf\146\uffdf\164\uffdf\001\002" +
    "\000\032\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\062\uffe5\063\uffe5\077\uffe5\146\uffe5\164\uffe5" +
    "\001\002\000\004\026\065\001\002\000\004\065\066\001" +
    "\002\000\032\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\062\uffd3\063\uffd3\077\uffd3\146\uffd3\164" +
    "\uffd3\001\002\000\004\010\120\001\002\000\004\010\101" +
    "\001\002\000\012\024\uffcf\104\uffcf\105\uffcf\106\uffcf\001" +
    "\002\000\004\010\077\001\002\000\012\024\074\104\072" +
    "\105\067\106\070\001\002\000\004\067\076\001\002\000" +
    "\012\024\uffd0\104\uffd0\105\uffd0\106\uffd0\001\002\000\044" +
    "\026\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\062\uffd1\063\uffd1\073\uffd1\074\uffd1\075\uffd1" +
    "\076\uffd1\077\uffd1\146\uffd1\164\uffd1\001\002\000\004\163" +
    "\100\001\002\000\012\024\uffcc\104\uffcc\105\uffcc\106\uffcc" +
    "\001\002\000\010\011\105\160\103\161\104\001\002\000" +
    "\022\004\111\005\112\006\107\007\110\024\uffcd\104\uffcd" +
    "\105\uffcd\106\uffcd\001\002\000\044\004\uff7f\005\uff7f\006" +
    "\uff7f\007\uff7f\012\uff7f\022\uff7f\024\uff7f\025\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\104\uff7f\105" +
    "\uff7f\106\uff7f\001\002\000\044\004\uff7e\005\uff7e\006\uff7e" +
    "\007\uff7e\012\uff7e\022\uff7e\024\uff7e\025\uff7e\031\uff7e\032" +
    "\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\104\uff7e\105\uff7e" +
    "\106\uff7e\001\002\000\010\011\105\160\103\161\104\001" +
    "\002\000\014\004\111\005\112\006\107\007\110\012\113" +
    "\001\002\000\010\011\105\160\103\161\104\001\002\000" +
    "\010\011\105\160\103\161\104\001\002\000\010\011\105" +
    "\160\103\161\104\001\002\000\010\011\105\160\103\161" +
    "\104\001\002\000\044\004\uff80\005\uff80\006\uff80\007\uff80" +
    "\012\uff80\022\uff80\024\uff80\025\uff80\031\uff80\032\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\104\uff80\105\uff80\106\uff80" +
    "\001\002\000\044\004\uff83\005\uff83\006\107\007\110\012" +
    "\uff83\022\uff83\024\uff83\025\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\035\uff83\036\uff83\104\uff83\105\uff83\106\uff83\001" +
    "\002\000\044\004\uff84\005\uff84\006\107\007\110\012\uff84" +
    "\022\uff84\024\uff84\025\uff84\031\uff84\032\uff84\033\uff84\034" +
    "\uff84\035\uff84\036\uff84\104\uff84\105\uff84\106\uff84\001\002" +
    "\000\044\004\uff81\005\uff81\006\uff81\007\uff81\012\uff81\022" +
    "\uff81\024\uff81\025\uff81\031\uff81\032\uff81\033\uff81\034\uff81" +
    "\035\uff81\036\uff81\104\uff81\105\uff81\106\uff81\001\002\000" +
    "\044\004\uff82\005\uff82\006\uff82\007\uff82\012\uff82\022\uff82" +
    "\024\uff82\025\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035" +
    "\uff82\036\uff82\104\uff82\105\uff82\106\uff82\001\002\000\010" +
    "\011\105\160\103\161\104\001\002\000\022\004\111\005" +
    "\112\006\107\007\110\024\uffce\104\uffce\105\uffce\106\uffce" +
    "\001\002\000\006\162\025\163\027\001\002\000\004\010" +
    "\225\001\002\000\014\110\uffac\112\uffac\147\uffac\150\uffac" +
    "\162\uffac\001\002\000\014\110\131\112\133\147\224\150" +
    "\122\162\123\001\002\000\014\110\uffad\112\uffad\147\uffad" +
    "\150\uffad\162\uffad\001\002\000\014\110\uffaa\112\uffaa\147" +
    "\uffaa\150\uffaa\162\uffaa\001\002\000\014\110\uffae\112\uffae" +
    "\147\uffae\150\uffae\162\uffae\001\002\000\004\011\153\001" +
    "\002\000\014\110\uffa9\112\uffa9\147\uffa9\150\uffa9\162\uffa9" +
    "\001\002\000\004\011\135\001\002\000\014\110\uffab\112" +
    "\uffab\147\uffab\150\uffab\162\uffab\001\002\000\012\011\105" +
    "\160\103\161\104\162\140\001\002\000\014\004\111\005" +
    "\112\006\107\007\110\012\uff8c\001\002\000\004\012\141" +
    "\001\002\000\004\012\uff8d\001\002\000\004\013\142\001" +
    "\002\000\010\110\131\112\133\150\122\001\002\000\012" +
    "\014\151\110\131\112\133\150\122\001\002\000\012\014" +
    "\uff92\110\uff92\112\uff92\150\uff92\001\002\000\012\014\uff93" +
    "\110\uff93\112\uff93\150\uff93\001\002\000\012\014\uff90\110" +
    "\uff90\112\uff90\150\uff90\001\002\000\012\014\uff8f\110\uff8f" +
    "\112\uff8f\150\uff8f\001\002\000\012\014\uff91\110\uff91\112" +
    "\uff91\150\uff91\001\002\000\016\014\uff8e\110\uff8e\112\uff8e" +
    "\147\uff8e\150\uff8e\162\uff8e\001\002\000\012\014\uff94\110" +
    "\uff94\112\uff94\150\uff94\001\002\000\022\011\161\030\160" +
    "\144\155\145\165\160\103\161\104\162\025\163\027\001" +
    "\002\000\036\004\111\005\112\006\107\007\110\012\uff8a" +
    "\022\uff8a\024\uff8a\025\uff8a\031\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\035\uff8a\036\uff8a\001\002\000\026\012\uff86\022\uff86" +
    "\024\uff86\025\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035" +
    "\uff86\036\uff86\001\002\000\026\012\uff8b\022\uff8b\024\uff8b" +
    "\025\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\001\002\000\024\012\uff96\024\uff96\025\uff96\031\uff96" +
    "\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\001\002\000" +
    "\006\144\155\145\165\001\002\000\022\011\161\030\160" +
    "\144\155\145\165\160\103\161\104\162\025\163\027\001" +
    "\002\000\026\012\uff89\022\uff89\024\uff89\025\uff89\031\uff89" +
    "\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\001\002\000" +
    "\024\012\uffa0\024\uffa0\025\uffa0\031\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\036\uffa0\001\002\000\024\012\174\024" +
    "\176\025\170\031\166\032\175\033\167\034\173\035\171" +
    "\036\172\001\002\000\026\012\uff85\022\uff85\024\uff85\025" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85" +
    "\001\002\000\022\011\161\030\160\144\155\145\165\160" +
    "\103\161\104\162\025\163\027\001\002\000\022\011\161" +
    "\030\160\144\155\145\165\160\103\161\104\162\025\163" +
    "\027\001\002\000\022\011\161\030\160\144\155\145\165" +
    "\160\103\161\104\162\025\163\027\001\002\000\022\011" +
    "\161\030\160\144\155\145\165\160\103\161\104\162\025" +
    "\163\027\001\002\000\022\011\161\030\160\144\155\145" +
    "\165\160\103\161\104\162\025\163\027\001\002\000\022" +
    "\011\161\030\160\144\155\145\165\160\103\161\104\162" +
    "\025\163\027\001\002\000\004\013\201\001\002\000\022" +
    "\011\161\030\160\144\155\145\165\160\103\161\104\162" +
    "\025\163\027\001\002\000\022\011\161\030\160\144\155" +
    "\145\165\160\103\161\104\162\025\163\027\001\002\000" +
    "\024\012\uff97\024\uff97\025\uff97\031\uff97\032\uff97\033\uff97" +
    "\034\uff97\035\uff97\036\uff97\001\002\000\024\012\uff9d\024" +
    "\176\025\170\031\uff9d\032\uff9d\033\167\034\173\035\171" +
    "\036\172\001\002\000\010\110\131\112\133\150\122\001" +
    "\002\000\012\014\203\110\131\112\133\150\122\001\002" +
    "\000\020\014\uffa1\110\uffa1\111\205\112\uffa1\147\uffa1\150" +
    "\uffa1\162\uffa1\001\002\000\016\014\uffa3\110\uffa3\112\uffa3" +
    "\147\uffa3\150\uffa3\162\uffa3\001\002\000\004\013\206\001" +
    "\002\000\010\110\131\112\133\150\122\001\002\000\012" +
    "\014\210\110\131\112\133\150\122\001\002\000\016\014" +
    "\uffa2\110\uffa2\112\uffa2\147\uffa2\150\uffa2\162\uffa2\001\002" +
    "\000\024\012\uff9a\024\uff9a\025\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\001\002\000\024\012\uff9c" +
    "\024\176\025\170\031\uff9c\032\uff9c\033\167\034\173\035" +
    "\uff9c\036\uff9c\001\002\000\024\012\uff9b\024\176\025\170" +
    "\031\uff9b\032\uff9b\033\167\034\173\035\uff9b\036\uff9b\001" +
    "\002\000\024\012\uff98\024\uff98\025\uff98\031\uff98\032\uff98" +
    "\033\uff98\034\uff98\035\uff98\036\uff98\001\002\000\024\012" +
    "\uff99\024\uff99\025\uff99\031\uff99\032\uff99\033\uff99\034\uff99" +
    "\035\uff99\036\uff99\001\002\000\024\012\uff9e\024\176\025" +
    "\170\031\uff9e\032\uff9e\033\167\034\173\035\171\036\172" +
    "\001\002\000\034\004\111\005\112\006\107\007\110\012" +
    "\113\024\uff8a\025\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\001\002\000\024\012\221\024\176\025" +
    "\170\031\166\032\175\033\167\034\173\035\171\036\172" +
    "\001\002\000\024\012\uff9f\024\uff9f\025\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\001\002\000\024" +
    "\012\uff95\024\uff95\025\uff95\031\uff95\032\uff95\033\uff95\034" +
    "\uff95\035\uff95\036\uff95\001\002\000\014\110\uffaf\112\uffaf" +
    "\147\uffaf\150\uffaf\162\uffaf\001\002\000\062\026\uffb0\043" +
    "\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\062\uffb0\063" +
    "\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0" +
    "\077\uffb0\146\uffb0\164\uffb0\001\002\000\020\011\105\144" +
    "\155\145\165\160\103\161\104\162\025\163\027\001\002" +
    "\000\004\022\227\001\002\000\014\110\uffa8\112\uffa8\147" +
    "\uffa8\150\uffa8\162\uffa8\001\002\000\006\022\uffa4\027\uffa4" +
    "\001\002\000\006\022\uffa5\027\uffa5\001\002\000\006\022" +
    "\234\027\233\001\002\000\006\162\025\163\027\001\002" +
    "\000\016\014\uffa7\110\uffa7\112\uffa7\147\uffa7\150\uffa7\162" +
    "\uffa7\001\002\000\006\022\uffa6\027\uffa6\001\002\000\030" +
    "\043\053\044\042\045\064\046\045\047\061\050\052\051" +
    "\047\063\240\077\037\146\055\164\044\001\002\000\032" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\062\uffb1\063\uffb1\077\uffb1\146\uffb1\164\uffb1\001\002" +
    "\000\032\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\062\uffb2\063\uffb2\077\uffb2\146\uffb2\164\uffb2" +
    "\001\002\000\032\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\062\uffe9\063\uffe9\077\uffe9\146\uffe9" +
    "\164\uffe9\001\002\000\004\010\253\001\002\000\004\010" +
    "\244\001\002\000\006\162\025\163\027\001\002\000\004" +
    "\143\246\001\002\000\004\010\247\001\002\000\006\162" +
    "\025\163\027\001\002\000\004\024\251\001\002\000\004" +
    "\070\252\001\002\000\044\026\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\062\uffcb\063\uffcb" +
    "\073\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\146\uffcb\164" +
    "\uffcb\001\002\000\006\162\025\163\027\001\002\000\004" +
    "\142\255\001\002\000\004\010\256\001\002\000\006\162" +
    "\025\163\027\001\002\000\004\024\260\001\002\000\004" +
    "\070\261\001\002\000\044\026\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\062\uffca\063\uffca" +
    "\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\146\uffca\164" +
    "\uffca\001\002\000\010\052\270\146\055\164\044\001\002" +
    "\000\004\010\264\001\002\000\006\144\155\145\165\001" +
    "\002\000\004\024\266\001\002\000\010\052\270\146\055" +
    "\164\044\001\002\000\024\052\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\071\uffdb\072\uffdb\146\uffdb\164\uffdb\001\002" +
    "\000\016\053\301\054\302\055\306\056\304\146\055\164" +
    "\044\001\002\000\010\052\uffc6\071\uffc6\164\uffc6\001\002" +
    "\000\010\052\270\071\277\164\044\001\002\000\010\052" +
    "\uffc3\071\uffc3\164\uffc3\001\002\000\012\052\uffc5\071\uffc5" +
    "\146\055\164\uffc5\001\002\000\024\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\071\uffdc\072\uffdc\146\uffdc\164\uffdc" +
    "\001\002\000\010\052\uffc7\071\uffc7\164\uffc7\001\002\000" +
    "\032\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\062\uffc8\063\uffc8\077\uffc8\146\uffc8\164\uffc8\001" +
    "\002\000\020\053\uffc0\054\uffc0\055\uffc0\056\uffc0\072\uffc0" +
    "\146\055\164\uffc0\001\002\000\016\026\315\044\042\047" +
    "\061\050\052\077\037\146\055\001\002\000\016\026\315" +
    "\044\042\047\061\050\052\077\037\146\055\001\002\000" +
    "\016\053\301\054\302\055\306\056\304\072\325\164\044" +
    "\001\002\000\016\026\315\044\042\047\061\050\052\077" +
    "\037\146\055\001\002\000\016\053\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\072\uffc1\164\uffc1\001\002\000\016\026\315\044" +
    "\042\047\061\050\052\077\037\146\055\001\002\000\016" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\072\uffbd\164\uffbd\001" +
    "\002\000\026\026\uffb5\044\uffb5\047\uffb5\050\uffb5\073\uffb5" +
    "\074\uffb5\075\uffb5\076\uffb5\077\uffb5\146\uffb5\001\002\000" +
    "\020\026\315\044\042\047\061\050\052\075\320\077\037" +
    "\146\055\001\002\000\026\026\uffb3\044\uffb3\047\uffb3\050" +
    "\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\146\uffb3" +
    "\001\002\000\026\026\uffb8\044\uffb8\047\uffb8\050\uffb8\073" +
    "\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\146\uffb8\001\002" +
    "\000\026\026\uffb6\044\uffb6\047\uffb6\050\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\077\uffb6\146\uffb6\001\002\000\026" +
    "\026\uffb4\044\uffb4\047\uffb4\050\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\077\uffb4\146\uffb4\001\002\000\026\026\uffb9" +
    "\044\uffb9\047\uffb9\050\uffb9\073\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\146\uffb9\001\002\000\026\026\uffb7\044\uffb7" +
    "\047\uffb7\050\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\146\uffb7\001\002\000\016\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\072\uffbc\164\uffbc\001\002\000\026\026\uffba\044" +
    "\uffba\047\uffba\050\uffba\073\uffba\074\uffba\075\uffba\076\uffba" +
    "\077\uffba\146\uffba\001\002\000\020\026\315\044\042\047" +
    "\061\050\052\076\323\077\037\146\055\001\002\000\016" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\072\uffbb\164\uffbb\001" +
    "\002\000\016\053\uffc2\054\uffc2\055\uffc2\056\uffc2\072\uffc2" +
    "\164\uffc2\001\002\000\010\052\uffc4\071\uffc4\164\uffc4\001" +
    "\002\000\020\026\315\044\042\047\061\050\052\074\327" +
    "\077\037\146\055\001\002\000\016\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\072\uffbe\164\uffbe\001\002\000\020\026\315" +
    "\044\042\047\061\050\052\073\331\077\037\146\055\001" +
    "\002\000\016\053\uffbf\054\uffbf\055\uffbf\056\uffbf\072\uffbf" +
    "\164\uffbf\001\002\000\010\052\270\071\333\164\044\001" +
    "\002\000\032\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\062\uffc9\063\uffc9\077\uffc9\146\uffc9\164" +
    "\uffc9\001\002\000\006\057\ufff4\164\ufff4\001\002\000\004" +
    "\066\336\001\002\000\032\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\062\uffd2\063\uffd2\077\uffd2" +
    "\146\uffd2\164\uffd2\001\002\000\004\010\342\001\002\000" +
    "\004\064\341\001\002\000\044\026\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda\062\uffda\063" +
    "\uffda\073\uffda\074\uffda\075\uffda\076\uffda\077\uffda\146\uffda" +
    "\164\uffda\001\002\000\012\100\344\101\345\102\346\103" +
    "\347\001\002\000\004\026\350\001\002\000\004\026\uffd8" +
    "\001\002\000\004\026\uffd7\001\002\000\004\026\uffd6\001" +
    "\002\000\004\026\uffd5\001\002\000\004\064\351\001\002" +
    "\000\044\026\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\062\uffd9\063\uffd9\073\uffd9\074\uffd9" +
    "\075\uffd9\076\uffd9\077\uffd9\146\uffd9\164\uffd9\001\002\000" +
    "\006\057\ufff2\164\ufff2\001\002\000\030\043\053\044\042" +
    "\045\064\046\045\047\061\050\052\051\047\062\354\077" +
    "\037\146\055\164\044\001\002\000\006\057\ufff3\164\ufff3" +
    "\001\002\000\004\060\365\001\002\000\006\042\ufffa\164" +
    "\ufffa\001\002\000\006\024\360\026\361\001\002\000\004" +
    "\025\363\001\002\000\004\061\362\001\002\000\004\060" +
    "\ufff7\001\002\000\004\061\364\001\002\000\004\060\ufff6" +
    "\001\002\000\006\042\ufffb\164\ufffb\001\002\000\006\042" +
    "\ufff9\164\ufff9\001\002\000\006\042\ufff8\164\ufff8\001\002" +
    "\000\006\003\011\040\012\001\002\000\006\042\014\164" +
    "\372\001\002\000\004\042\014\001\002\000\006\057\375" +
    "\164\374\001\002\000\004\057\376\001\002\000\004\002" +
    "\000\001\002\000\004\002\uffff\001\002\000\004\057\u0100" +
    "\001\002\000\004\002\ufffe\001\002\000\004\042\014\001" +
    "\002\000\004\057\u0103\001\002\000\004\002\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\060\005\001\001\000\004\061\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\012\001\001\000\002\001\001\000\004\063" +
    "\354\001\001\000\004\062\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\056\006" +
    "\055\007\053\010\042\024\061\051\057\054\352\064\050" +
    "\065\062\070\035\071\037\074\047\001\001\000\002\001" +
    "\001\000\006\002\021\003\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\005\056\006\055\007\053\010\042\024\061" +
    "\051\057\054\045\064\050\065\062\070\035\071\037\074" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\056" +
    "\006\055\007\053\010\042\024\061\051\240\064\050\065" +
    "\062\070\035\071\037\074\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\056\006\055\007\053\010\042\024\061\051\057" +
    "\054\235\064\050\065\062\070\035\071\037\074\047\001" +
    "\001\000\002\001\001\000\020\015\124\016\127\017\125" +
    "\020\126\021\133\022\131\075\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\066\072" +
    "\067\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\067\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\105\001\001\000" +
    "\002\001\001\000\004\004\116\001\001\000\004\004\115" +
    "\001\001\000\004\004\114\001\001\000\004\004\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\120\001" +
    "\001\000\002\001\001\000\010\003\227\025\230\053\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\016" +
    "\222\017\125\020\126\021\133\022\131\075\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\135\033\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\145\021\147\022\146\031\142\032\144\075" +
    "\143\001\001\000\014\020\145\021\147\022\146\032\151" +
    "\075\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\155\004\153\012" +
    "\161\023\156\027\163\030\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\221\001\001\000\016\003\155\004\216\012\161" +
    "\023\156\027\217\030\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\155\004\153\012\161\023\156\027\215\030\162\001" +
    "\001\000\016\003\155\004\153\012\161\023\156\027\214" +
    "\030\162\001\001\000\016\003\155\004\153\012\161\023" +
    "\156\027\213\030\162\001\001\000\016\003\155\004\153" +
    "\012\161\023\156\027\212\030\162\001\001\000\016\003" +
    "\155\004\153\012\161\023\156\027\211\030\162\001\001" +
    "\000\016\003\155\004\153\012\161\023\156\027\210\030" +
    "\162\001\001\000\002\001\001\000\016\003\155\004\153" +
    "\012\161\023\156\027\177\030\162\001\001\000\016\003" +
    "\155\004\153\012\161\023\156\027\176\030\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\145\021" +
    "\147\022\146\031\201\032\144\075\143\001\001\000\016" +
    "\020\145\021\147\022\146\026\203\032\151\075\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\145\021\147\022\146\031\206\032\144\075" +
    "\143\001\001\000\014\020\145\021\147\022\146\032\151" +
    "\075\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\155\004\153\012\161\023" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\227\025\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\056\006\055\007\053\010\042\024\061\051" +
    "\240\064\050\065\062\070\035\071\037\074\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\266\024\272\050" +
    "\273\056\331\073\270\001\001\000\002\001\001\000\004" +
    "\012\264\001\001\000\002\001\001\000\014\010\266\024" +
    "\272\050\273\056\271\073\270\001\001\000\002\001\001" +
    "\000\014\010\266\024\306\050\277\057\302\072\304\001" +
    "\001\000\002\001\001\000\006\024\272\073\275\001\001" +
    "\000\002\001\001\000\004\010\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\274" +
    "\001\001\000\020\005\312\010\311\052\315\055\327\064" +
    "\316\070\313\071\307\001\001\000\020\005\312\010\311" +
    "\052\315\055\325\064\316\070\313\071\307\001\001\000" +
    "\006\024\306\072\323\001\001\000\020\005\312\010\311" +
    "\052\315\055\321\064\316\070\313\071\307\001\001\000" +
    "\002\001\001\000\020\005\312\010\311\052\315\055\310" +
    "\064\316\070\313\071\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\312\010\311\052\320\064\316" +
    "\070\313\071\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\312\010\311\052\320\064\316\070\313\071\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\005\312\010\311\052\320\064\316\070\313" +
    "\071\307\001\001\000\002\001\001\000\016\005\312\010" +
    "\311\052\320\064\316\070\313\071\307\001\001\000\002" +
    "\001\001\000\006\024\272\073\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\056\006\055\007\053\010\042\024\061\051\240\064" +
    "\050\065\062\070\035\071\037\074\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\u0100\001\001" +
    "\000\004\062\372\001\001\000\004\062\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u0101\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    //public static LinkedList<Errores> ListES = new LinkedList<Errores>();
    
    //ArrayList<Puntos> AuxPuntos = new ArrayList<Puntos>();
    //Lineas auxlin = new Lineas();
    //XYline auxXYl = new XYline();
    //Barras auxbarra = new Barras();
    //Galeria auxgaleria = new Galeria();
    
    //Metodo de recuperacion de errores
    char tipo;
    
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        
        int fila = s.right;
        int columna = s.left;

        System.out.println("-------------> Recuperandose de Error Sintactico <-------------");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: " +fila);
        System.out.println("\t\tColumna: "+columna);
        
        Errores datos = new Errores(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        Listas.Errores_Sin.add(datos);
    }
	
    //Metodo de no recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("-------------> Error sintactico no recuperado, entrando en modo panico <-------------");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: " +fila);
        
        Errores datos = new Errores(lexema, fila, columna, "Error Sintactico", "Caracter no esperado");
        Listas.Errores_Sin.add(datos);
    }

    public String tipo(char a){
        switch(a){
            case 'i':
                return "int";

                case 'd':
                    return "double";

                case 'b':
                    return "boolean";

                case 's':
                    return "string";
                    
                default:
                    return "";
        }
    }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$A_Sintactico$actions {



  private final A_Sintactico parser;

  /** Constructor */
  CUP$A_Sintactico$actions(A_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action_part00000000(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$A_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Html start_val = (Html)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$A_Sintactico$parser.done_parsing();
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= tk_Compi_A CABECERA CUERPO tk_Compi_C 
            {
              Html RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Cabecera a = (Cabecera)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Cuerpo b = (Cuerpo)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 Html inicio = new Html(a,b); Informacion.documento = inicio.html_code(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= tk_Compi_A CABECERA CUERPO Eti_Coment tk_Compi_C 
            {
              Html RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		Cabecera a = (Cabecera)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Cuerpo b = (Cuerpo)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		 Html inicio = new Html(a,b); Informacion.documento = inicio.html_code(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= tk_Compi_A CABECERA Eti_Coment CUERPO tk_Compi_C 
            {
              Html RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		Cabecera a = (Cabecera)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Cuerpo b = (Cuerpo)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 Html inicio = new Html(a,b); Informacion.documento = inicio.html_code(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= tk_Compi_A Eti_Coment CABECERA CUERPO tk_Compi_C 
            {
              Html RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Cabecera a = (Cabecera)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Cuerpo b = (Cuerpo)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 Html inicio = new Html(a,b); Informacion.documento = inicio.html_code(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= Eti_Coment tk_Compi_A CABECERA CUERPO tk_Compi_C 
            {
              Html RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		Cabecera a = (Cabecera)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Cuerpo b = (Cuerpo)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 Html inicio = new Html(a,b); Informacion.documento = inicio.html_code(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("S",46, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= tk_Cabecera_A TITULO tk_Cabecera_C 
            {
              Cabecera RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		Titulo a = (Titulo)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Cabecera(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CABECERA",47, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABECERA ::= tk_Cabecera_A tk_Cabecera_C 
            {
              Cabecera RESULT =null;
		 RESULT = new Cabecera(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CABECERA",47, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABECERA ::= error tk_Cuerpo_A 
            {
              Cabecera RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CABECERA",47, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABECERA ::= error tk_Compi_C 
            {
              Cabecera RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CABECERA",47, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TITULO ::= tk_Titulo_A TextoN tk_Titulo_C 
            {
              Titulo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = new Titulo(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO",49, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TITULO ::= tk_Titulo_A mayorq menorq tk_Titulo_C 
            {
              Titulo RESULT =null;
		 RESULT = new Titulo(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TITULO",49, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= tk_Cuerpo_A tk_Fondo igual COLOR mayorq tk_Cuerpo_C 
            {
              Cuerpo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		RESULT = new Cuerpo(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",48, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= tk_Cuerpo_A tk_Fondo igual COLOR mayorq CONT tk_Cuerpo_C 
            {
              Cuerpo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> b = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Cuerpo(a,b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",48, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= tk_Cuerpo_A mayorq CONT tk_Cuerpo_C 
            {
              Cuerpo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Cuerpo("",a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",48, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= tk_Cuerpo_A mayorq tk_Cuerpo_C 
            {
              Cuerpo RESULT =null;
		 RESULT = new Cuerpo(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",48, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // COLOR ::= VAL_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COLOR ::= tk_Rojo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COLOR ::= tk_Azul 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COLOR ::= tk_Verde 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COLOR ::= tk_Gris 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COLOR ::= tk_Negro 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COLOR ::= tk_Amarillo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COLOR ::= tk_Rosado 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR",0, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONT ::= CONT CONTENIDO 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONT",42, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONT ::= CONTENIDO 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONT",42, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDO ::= PARRAFO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Parrafo a = (Parrafo)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONTENIDO ::= SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONTENIDO ::= ESPACIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Espacio a = (Espacio)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONTENIDO ::= TEXTOA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTENIDO ::= TEXTOB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTENIDO ::= IMAGEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Imagen a = (Imagen)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONTENIDO ::= BOTON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONTENIDO ::= TABLA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Tabla a = (Tabla)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; System.out.println("Llego a la tabla"); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONTENIDO ::= COMENTARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTENIDO ::= SCRIPT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",39, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // COMENTARIO ::= Eti_Coment 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 String b = a.replace("<!","<!-"); RESULT = b.replace("!>","->") + "\n "; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COMENTARIO",18, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LIST_SCRIPT ::= LIST_SCRIPT SCRIPT 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST_SCRIPT",38, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LIST_SCRIPT ::= SCRIPT 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("LIST_SCRIPT",38, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARRAFO ::= tk_Parrafo_A TextoN tk_Parrafo_C 
            {
              Parrafo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Parrafo(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PARRAFO",50, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARRAFO ::= tk_Parrafo_A tk_Alineacion igual ALINEACION TextoN tk_Parrafo_C 
            {
              Parrafo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Parrafo(a,b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("PARRAFO",50, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ALINEACION ::= tk_Izquierda 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ALINEACION ::= tk_Derecha 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ALINEACION ::= tk_Centrado 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ALINEACION ::= tk_Justificado 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"","").toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ALINEACION",7, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SALTO ::= tk_Salto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = "<br/>\n"; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("SALTO",3, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TEXTOA ::= tk_TextoA_A TextoN tk_TextoA_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = "<h1>"+ a + "</h1>\n"; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOA",4, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TEXTOB ::= tk_TextoB_A TextoN tk_TextoB_C 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = "<h3>"+ a + "</h3>\n"; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTOB",5, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IMAGEN ::= tk_Imagen_A IMG mayorq tk_Imagen_C 
            {
              Imagen RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		ArrayList<Detalle_IMG> a = (ArrayList<Detalle_IMG>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		 RESULT = new Imagen(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",54, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMG ::= IMG CARACTIMG 
            {
              ArrayList<Detalle_IMG> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Detalle_IMG> a = (ArrayList<Detalle_IMG>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Detalle_IMG b = (Detalle_IMG)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("IMG",52, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMG ::= CARACTIMG 
            {
              ArrayList<Detalle_IMG> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Detalle_IMG a = (Detalle_IMG)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("IMG",52, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CARACTIMG ::= tk_Alto igual OP 
            {
              Detalle_IMG RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = new Detalle_IMG("alto",Double.parseDouble(a)); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTIMG",53, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CARACTIMG ::= tk_Ancho igual OP 
            {
              Detalle_IMG RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = new Detalle_IMG("ancho",Double.parseDouble(a)); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTIMG",53, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CARACTIMG ::= tk_Path igual cadena 
            {
              Detalle_IMG RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = new Detalle_IMG("url",a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTIMG",53, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BOTON ::= tk_Boton_A tk_ID igual VAL_STRING tk_Texto igual VAL_STRING mayorq tk_Boton_C 
            {
              Boton RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		 RESULT = new Boton(a,b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",55, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BOTON ::= tk_Boton_A tk_Texto igual VAL_STRING tk_ID igual VAL_STRING mayorq tk_Boton_C 
            {
              Boton RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		 RESULT = new Boton(a,b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("BOTON",55, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TABLA ::= tk_Tabla_A mayorq CONTENIDOT tk_Tabla_C 
            {
              Tabla RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Tabla(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",58, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TABLA ::= tk_Tabla_A tk_Borde igual VAL_BOOL mayorq CONTENIDOT tk_Tabla_C 
            {
              Tabla RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> b = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Tabla(a,b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",58, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONTENIDOT ::= CONTENIDOT FILA 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOT",44, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTENIDOT ::= FILA 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOT",44, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTENIDOT ::= LIST_SCRIPT 
            {
              ArrayList<Object> RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOT",44, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FILA ::= tk_Fila_A CONTF tk_Fila_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		RESULT = new Fila(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FILA",57, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FILA ::= COMENTARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FILA",57, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONTF ::= CONTF COLUMNA 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b);  
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTF",45, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONTF ::= COLUMNA 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a);
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTF",45, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTF ::= LIST_SCRIPT 
            {
              ArrayList<Object> RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTF",45, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COLUMNA ::= tk_ColumnaC_A CONTC tk_ColumnaC_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Columna(1,a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",56, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COLUMNA ::= tk_Columna_A CONTC tk_Columna_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Columna(2,a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",56, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COLUMNA ::= COMENTARIO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",56, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COLUMNA ::= tk_ColumnaC_A2 CONTC tk_ColumnaC_C2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Columna(1,a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",56, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COLUMNA ::= tk_Columna_A2 CONTC tk_Columna_C2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Columna(2,a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",56, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTC ::= CONTC AUXC 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTC",43, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTC ::= AUXC 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONTC",43, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // AUXC ::= SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXC",40, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AUXC ::= PARRAFO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Parrafo a = (Parrafo)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXC",40, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // AUXC ::= IMAGEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Imagen a = (Imagen)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXC",40, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // AUXC ::= BOTON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		Boton a = (Boton)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXC",40, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AUXC ::= TextoN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXC",40, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AUXC ::= SCRIPT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXC",40, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ESPACIO ::= tk_Espacio_A CONT tk_Espacio_C 
            {
              Espacio RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = new Espacio(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ESPACIO",51, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESPACIO ::= tk_Espacio_A tk_Espacio_C 
            {
              Espacio RESULT =null;
		 RESULT = new Espacio(null); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("ESPACIO",51, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SCRIPT ::= tk_HS_A FUNCIONES tk_HS_C 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("SCRIPT",6, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FUNCIONES ::= FUNCIONES AUXFUN 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FUNCIONES ::= AUXFUN 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",11, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AUXFUN ::= VAR_HS 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXFUN",12, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AUXFUN ::= F_ECHO 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXFUN",12, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AUXFUN ::= F_IF 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXFUN",12, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AUXFUN ::= F_REP 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXFUN",12, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AUXFUN ::= F_NAT 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("AUXFUN",12, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VAR_HS ::= id igual VAL puntComa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 Variables vari = new Variables(tipo(tipo),a,b);
                                        Listas.variablesG.add(vari); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VAR_HS",13, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // F_ECHO ::= tk_Echo L_ECHO puntComa 
            {
              Echo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 Echo contenido = new Echo(a);
                                    Listas.contEcho.add(contenido); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F_ECHO",59, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // L_ECHO ::= L_ECHO punto CADEN 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("L_ECHO",41, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // L_ECHO ::= CADEN 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("L_ECHO",41, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CADEN ::= VAL_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a.replace("\"",""); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CADEN",19, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // F_IF ::= tk_If parentA CONDICION parentC llaveA CONT2 F_ELSE 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F_IF",15, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // F_ELSE ::= llaveC tk_Else llaveA CONT2 llaveC 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F_ELSE",20, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // F_ELSE ::= llaveC 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F_ELSE",20, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION ::= E 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION ::= parentA CONDICION parentC 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= CONDICION AND CONDICION 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= CONDICION OR CONDICION 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONDICION ::= CONDICION diferente CONDICION 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONDICION ::= CONDICION igualigual CONDICION 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONDICION ::= CONDICION menorigual CONDICION 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONDICION ::= CONDICION mayorigual CONDICION 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CONDICION ::= CONDICION menorq CONDICION 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CONDICION ::= CONDICION mayorq CONDICION 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",21, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= VAL 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= exclama VAL_BOOL 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("E",22, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONT2 ::= CONT2 A_FUNCIONES 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONT2",23, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CONT2 ::= A_FUNCIONES 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("CONT2",23, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // A_FUNCIONES ::= F_ECHO 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("A_FUNCIONES",24, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // A_FUNCIONES ::= F_IF 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("A_FUNCIONES",24, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // A_FUNCIONES ::= F_REP 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("A_FUNCIONES",24, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // A_FUNCIONES ::= F_NAT 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("A_FUNCIONES",24, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // F_REP ::= tk_Repetir parentA FOR_COND parentC llaveA CONT2 llaveC 
            {
              String RESULT =null;

              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("F_REP",14, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FOR_COND ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_COND",25, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FOR_COND ::= OP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("FOR_COND",25, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VAL ::= VAL_STRING 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VAL ::= OP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // VAL ::= VAL_BOOL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",17, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VAL_STRING ::= cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 tipo = 's'; RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_STRING",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VAL_STRING ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 String contenido = "";
              for(int b=0; b<Listas.variablesG.size(); b++){
                  if(Listas.variablesG.get(b).getNombreVariable().equals(a)){
                      contenido = Listas.variablesG.get(b).getValor();
                      RESULT = contenido;
                      break;
                  }
              }
              if(contenido.equals("")){
                System.out.println("Error Semantico ");
            }
            
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_STRING",1, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VAL_BOOL ::= tk_True 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 tipo = 'b'; RESULT = a.toLowerCase(); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_BOOL",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VAL_BOOL ::= tk_False 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 tipo = 'b'; RESULT = a.toLowerCase();  
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("VAL_BOOL",8, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP ::= OP mas OP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 double val1 = Double.parseDouble(a);
                        double val2 = Double.parseDouble(b);
                        double sum = val1 + val2;
                        RESULT =  Double.toString(sum); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OP",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP ::= OP menos OP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		double val1 =  Double.parseDouble(a);
                        double val2 =  Double.parseDouble(b);
                        double res = val1 - val2;
                        RESULT =  Double.toString(res); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OP",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP ::= OP por OP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		  double val1 =  Double.parseDouble(a);
                        double val2 =  Double.parseDouble(b);
                        double multi = val1 * val2;
                        RESULT = Double.toString(multi); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OP",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP ::= OP divicion OP 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 double val1 =  Double.parseDouble(a);
                        double val2 = Double.parseDouble(b);
                        double divi = val1 / val2;
                        RESULT = Double.toString(divi); 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OP",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OP ::= parentA OP parentC 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OP",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.elementAt(CUP$A_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OP ::= numero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 tipo = 'i'; RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OP",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OP ::= decimal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$A_Sintactico$stack.peek()).value;
		 tipo = 'd'; RESULT = a; 
              CUP$A_Sintactico$result = parser.getSymbolFactory().newSymbol("OP",2, ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$A_Sintactico$stack.peek()), RESULT);
            }
          return CUP$A_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$A_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$A_Sintactico$do_action(
    int                        CUP$A_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$A_Sintactico$parser,
    java.util.Stack            CUP$A_Sintactico$stack,
    int                        CUP$A_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$A_Sintactico$do_action_part00000000(
                               CUP$A_Sintactico$act_num,
                               CUP$A_Sintactico$parser,
                               CUP$A_Sintactico$stack,
                               CUP$A_Sintactico$top);
    }
}

}
