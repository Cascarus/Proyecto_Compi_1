/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.*;
import java.util.*;
import Lista.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Analizador_Lexico.flex</tt>
 */
public class A_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT = 2;
  public static final int TEXT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  9, 58,  7,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6, 13,  5,  4,  4,  0, 56,  0, 46, 47, 11, 43, 55, 44,  3, 10, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 53, 54, 12, 45, 14, 41, 
     0, 21, 22, 15, 36, 23, 30, 32, 37, 20, 38, 40, 27, 17, 33, 16, 
    18, 35, 24, 29, 25, 26, 42,  1, 31,  1, 34, 50,  0, 51,  0,  1, 
     0, 21, 22, 15, 36, 23, 30, 32, 37, 20, 38, 40, 27, 17, 33, 16, 
    18, 35, 24, 29, 25, 26, 42,  1, 31,  1, 34, 48, 57, 49,  0,  0, 
     0,  0,  0,  0,  0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 52, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\13\1\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\1\1\32\1\33\2\0"+
    "\1\34\30\0\1\35\1\36\1\37\3\0\1\40\1\0"+
    "\1\41\14\0\1\42\1\43\1\44\1\45\1\46\114\0"+
    "\1\47\14\0\1\50\2\0\1\51\2\0\1\52\2\0"+
    "\1\53\1\54\2\0\1\55\64\0\1\56\1\57\1\0"+
    "\1\60\6\0\1\61\1\62\10\0\1\63\1\0\1\64"+
    "\1\65\30\0\1\66\2\0\1\67\1\0\1\70\31\0"+
    "\1\71\2\0\1\72\16\0\1\73\1\74\2\0\1\75"+
    "\1\0\1\76\1\0\1\77\1\100\1\101\10\0\1\102"+
    "\1\0\1\103\1\0\1\104\4\0\1\105\1\0\1\106"+
    "\5\0\1\107\4\0\1\110\1\111\1\112\1\113\4\0"+
    "\1\114\1\0\1\115\1\116\1\117\1\0\1\120\7\0"+
    "\1\121\3\0\1\122\1\123\1\124\2\0\1\125\1\126"+
    "\3\0\1\127\1\0\1\130\1\0\1\131\2\0\1\132"+
    "\1\133\1\0\1\134\1\135\1\0\1\136\13\0\1\137"+
    "\1\0\1\140\1\0\1\141\1\142\2\0\1\143\1\144"+
    "\1\145\2\0\1\146\1\147\1\0\1\150\1\151\4\0"+
    "\1\152\1\0\1\153\1\154\1\0\1\155\1\156\1\157"+
    "\5\0\1\160\1\161\1\0\1\162\1\163\1\164\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\261\0\u0127\0\u0162"+
    "\0\261\0\261\0\u019d\0\261\0\u01d8\0\u0213\0\u024e\0\u0289"+
    "\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\261\0\261\0\u054d\0\261\0\261"+
    "\0\261\0\261\0\261\0\261\0\261\0\261\0\261\0\261"+
    "\0\u0588\0\u05c3\0\261\0\261\0\u05fe\0\u0639\0\261\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\261"+
    "\0\261\0\261\0\u0bfc\0\u0c37\0\u0c72\0\261\0\u0cad\0\261"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85"+
    "\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\261\0\261\0\261\0\261"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\261\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e"+
    "\0\u23b9\0\u23f4\0\261\0\u242f\0\u246a\0\261\0\u24a5\0\u24e0"+
    "\0\261\0\u251b\0\u2556\0\261\0\261\0\u2591\0\u25cc\0\261"+
    "\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c"+
    "\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04"+
    "\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc"+
    "\0\u3117\0\u3152\0\u318d\0\u31c8\0\261\0\261\0\u3203\0\261"+
    "\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\261\0\261"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d"+
    "\0\261\0\u3578\0\261\0\261\0\u35b3\0\u35ee\0\u3629\0\u3664"+
    "\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c"+
    "\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14"+
    "\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\261\0\u3b3b\0\u3b76\0\261"+
    "\0\u3bb1\0\261\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13"+
    "\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb"+
    "\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3"+
    "\0\u40fe\0\u4139\0\u4174\0\261\0\u41af\0\u41ea\0\261\0\u4225"+
    "\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd"+
    "\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524\0\261\0\261\0\u455f"+
    "\0\u459a\0\261\0\u45d5\0\261\0\u4610\0\261\0\261\0\261"+
    "\0\u464b\0\u4686\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8"+
    "\0\261\0\u4823\0\261\0\u485e\0\261\0\u4899\0\u48d4\0\u490f"+
    "\0\u494a\0\261\0\u4985\0\261\0\u49c0\0\u49fb\0\u4a36\0\u4a71"+
    "\0\u4aac\0\261\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\261\0\261"+
    "\0\261\0\261\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84\0\261\0\u4cbf"+
    "\0\261\0\261\0\u4cfa\0\u4d35\0\261\0\u4d70\0\u4dab\0\u4de6"+
    "\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\261\0\u4f0d\0\u4f48\0\u4f83"+
    "\0\261\0\261\0\261\0\u4fbe\0\u4ff9\0\261\0\261\0\u5034"+
    "\0\u506f\0\u50aa\0\261\0\u50e5\0\261\0\u5120\0\261\0\u515b"+
    "\0\u5196\0\261\0\261\0\u51d1\0\261\0\u520c\0\u5247\0\261"+
    "\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4\0\u541f"+
    "\0\u545a\0\u5495\0\u54d0\0\261\0\u550b\0\261\0\u5546\0\261"+
    "\0\261\0\u5581\0\u55bc\0\261\0\261\0\261\0\u55f7\0\u5632"+
    "\0\261\0\261\0\u566d\0\261\0\261\0\u56a8\0\u56e3\0\u571e"+
    "\0\u5759\0\261\0\u5794\0\261\0\261\0\u57cf\0\261\0\261"+
    "\0\261\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\261\0\261"+
    "\0\u5931\0\261\0\261\0\261\0\261";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\4\1\5\1\6\1\7\1\10\3\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\2\4\1\21\2\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\4\2\30\1\31"+
    "\1\4\1\32\10\4\1\33\1\4\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\0\7\4\2\0\1\12"+
    "\60\4\1\0\14\53\1\54\56\53\75\0\1\5\1\55"+
    "\70\0\2\7\14\0\4\7\1\0\10\7\1\0\12\7"+
    "\1\0\1\7\1\0\1\7\20\0\5\56\1\57\11\56"+
    "\1\60\3\56\2\61\1\62\2\56\1\63\7\56\1\64"+
    "\1\65\2\56\1\66\1\56\1\67\3\56\1\70\20\56"+
    "\12\0\1\71\1\72\3\0\1\73\2\0\1\74\6\0"+
    "\1\75\53\0\1\76\2\0\1\77\1\0\1\100\2\0"+
    "\1\101\2\102\1\0\1\103\1\104\1\0\1\105\4\0"+
    "\1\106\12\0\1\107\3\0\1\110\72\0\1\111\72\0"+
    "\1\112\45\0\1\113\2\0\1\114\64\0\1\115\103\0"+
    "\1\116\2\0\1\117\2\0\1\120\61\0\1\121\5\0"+
    "\1\122\51\0\1\123\71\0\1\124\13\0\1\125\66\0"+
    "\1\126\72\0\1\127\1\130\71\0\1\131\63\0\1\132"+
    "\4\0\1\133\74\0\1\134\61\0\1\135\131\0\1\136"+
    "\105\0\1\137\73\0\1\140\3\0\1\141\1\55\67\0"+
    "\5\56\1\57\72\56\1\57\21\56\1\142\50\56\1\57"+
    "\34\56\1\143\35\56\1\57\13\56\1\144\20\56\1\145"+
    "\35\56\1\57\12\56\1\146\57\56\1\57\22\56\1\147"+
    "\47\56\1\57\21\56\1\150\50\56\1\57\21\56\1\151"+
    "\50\56\1\57\24\56\1\152\45\56\1\57\21\56\1\153"+
    "\43\56\10\71\2\11\61\71\13\72\1\154\57\72\20\0"+
    "\1\155\77\0\1\156\70\0\2\157\2\0\1\160\62\0"+
    "\1\161\3\0\2\162\1\0\1\163\1\164\1\0\1\165"+
    "\2\0\2\166\1\167\34\0\15\77\1\170\55\77\20\0"+
    "\1\171\4\0\1\172\4\0\1\173\65\0\1\174\66\0"+
    "\1\175\71\0\1\176\106\0\2\177\60\0\2\200\1\201"+
    "\1\0\1\202\66\0\2\203\113\0\1\204\54\0\1\205"+
    "\66\0\2\206\77\0\1\207\75\0\2\210\60\0\2\211"+
    "\4\0\1\212\60\0\1\213\103\0\1\214\107\0\1\215"+
    "\61\0\2\216\57\0\1\217\107\0\1\220\65\0\1\221"+
    "\71\0\1\222\102\0\1\223\64\0\1\224\70\0\1\225"+
    "\43\0\1\141\70\0\5\56\1\57\33\56\1\226\36\56"+
    "\1\57\35\56\1\227\34\56\1\57\17\56\1\230\52\56"+
    "\1\57\24\56\1\231\45\56\1\57\26\56\2\232\10\56"+
    "\1\233\31\56\1\57\15\56\2\234\53\56\1\57\32\56"+
    "\1\235\37\56\1\57\22\56\1\236\47\56\1\57\26\56"+
    "\2\237\42\56\1\57\22\56\1\240\42\56\12\72\1\11"+
    "\1\154\57\72\33\0\1\241\67\0\1\242\73\0\1\243"+
    "\100\0\1\244\53\0\1\245\4\0\1\246\4\0\1\247"+
    "\61\0\1\250\71\0\1\251\106\0\2\252\62\0\1\253"+
    "\72\0\1\254\70\0\2\255\46\0\15\77\1\170\1\256"+
    "\54\77\21\0\1\257\11\0\1\260\65\0\1\261\73\0"+
    "\1\262\73\0\1\263\67\0\1\264\76\0\1\265\63\0"+
    "\1\266\101\0\1\267\67\0\1\270\103\0\1\271\66\0"+
    "\1\272\73\0\2\273\62\0\1\274\64\0\1\275\120\0"+
    "\1\276\54\0\1\277\104\0\1\300\51\0\1\301\117\0"+
    "\1\302\71\0\1\303\46\0\1\304\101\0\1\305\72\0"+
    "\1\306\74\0\1\307\70\0\1\310\62\0\1\311\2\0"+
    "\1\312\2\0\1\313\1\314\2\0\1\315\105\0\1\316"+
    "\62\0\2\317\54\0\1\320\2\0\1\321\2\0\1\322"+
    "\3\0\1\323\41\0\5\56\1\57\23\56\1\324\46\56"+
    "\1\57\24\56\1\325\45\56\1\57\22\56\1\326\47\56"+
    "\1\57\25\56\1\327\44\56\1\57\17\56\1\330\52\56"+
    "\1\57\12\56\1\331\57\56\1\57\26\56\2\332\42\56"+
    "\1\57\22\56\1\333\47\56\1\57\21\56\1\334\50\56"+
    "\1\57\23\56\1\335\46\56\1\57\36\56\1\336\26\56"+
    "\32\0\1\337\70\0\1\340\74\0\1\341\71\0\1\342"+
    "\62\0\1\343\11\0\1\344\65\0\1\345\73\0\1\346"+
    "\70\0\1\347\76\0\1\350\63\0\1\351\76\0\1\352"+
    "\77\0\1\353\72\0\1\354\61\0\1\355\102\0\1\356"+
    "\67\0\1\357\73\0\1\360\72\0\1\361\102\0\1\362"+
    "\52\0\1\363\77\0\1\364\77\0\1\365\73\0\1\366"+
    "\70\0\1\367\66\0\1\370\75\0\1\371\111\0\2\372"+
    "\52\0\1\373\71\0\1\374\63\0\1\375\101\0\1\376"+
    "\74\0\1\377\61\0\1\u0100\72\0\1\u0101\77\0\1\u0102"+
    "\100\0\1\u0103\5\0\1\u0104\51\0\1\u0105\101\0\1\u0106"+
    "\63\0\1\u0107\101\0\1\u0108\63\0\1\u0109\77\0\1\u010a"+
    "\100\0\1\u010b\5\0\1\u010c\60\0\1\u010d\43\0\5\56"+
    "\1\57\22\56\1\u010e\47\56\1\57\15\56\2\u010f\53\56"+
    "\1\57\15\56\2\u0110\53\56\1\u0111\72\56\1\57\36\56"+
    "\1\u0112\33\56\1\u0113\72\56\1\u0114\72\56\1\57\12\56"+
    "\1\u0115\57\56\1\57\11\56\1\u0116\60\56\1\57\15\56"+
    "\2\u0117\53\56\1\57\21\56\1\u0118\43\56\21\0\1\u0119"+
    "\76\0\1\u011a\100\0\1\u011b\57\0\1\u011c\74\0\1\u011d"+
    "\102\0\1\u011e\67\0\1\u011f\73\0\1\u0120\102\0\1\u0121"+
    "\52\0\1\u0122\77\0\1\u0123\100\0\1\u0124\70\0\1\u0125"+
    "\66\0\1\u0126\70\0\2\u0127\67\0\1\u0128\70\0\1\u0129"+
    "\75\0\1\u012a\75\0\1\u012b\74\0\1\u012c\104\0\1\u012d"+
    "\50\0\1\u012e\106\0\1\u012f\64\0\1\u0130\65\0\1\u0131"+
    "\70\0\1\u0132\76\0\1\u0133\2\u0134\1\0\1\u0135\2\0"+
    "\1\u0136\67\0\1\u0137\75\0\1\u0138\66\0\1\u0139\70\0"+
    "\2\u013a\107\0\1\u013b\62\0\1\u013c\64\0\2\u013d\4\0"+
    "\1\u013e\60\0\1\u013f\103\0\1\u0140\101\0\1\u0141\74\0"+
    "\1\u0142\62\0\1\u0143\64\0\2\u0144\4\0\1\u0145\60\0"+
    "\1\u0146\112\0\1\u0147\33\0\5\56\1\57\17\56\1\u0148"+
    "\52\56\1\57\21\56\1\u0149\50\56\1\57\25\56\1\u014a"+
    "\44\56\1\57\12\56\1\u014b\57\56\1\u014c\72\56\1\57"+
    "\37\56\1\u014d\32\56\1\57\30\56\1\u014e\41\56\1\u014f"+
    "\65\56\41\0\1\u0150\67\0\1\u0151\54\0\1\u0152\77\0"+
    "\1\u0153\1\u0154\67\0\2\u0155\67\0\1\u0156\70\0\1\u0157"+
    "\75\0\1\u0158\77\0\1\u0159\104\0\1\u015a\50\0\1\u015b"+
    "\100\0\1\u015c\65\0\1\u015d\70\0\1\u015e\72\0\1\u015f"+
    "\115\0\1\u0160\60\0\1\u0161\63\0\1\u0162\110\0\1\u0163"+
    "\75\0\1\u0164\54\0\2\u0165\66\0\1\u0166\77\0\1\u0167"+
    "\1\u0168\71\0\1\u0169\66\0\1\u016a\71\0\1\u016b\77\0"+
    "\1\u016c\1\0\1\u016d\63\0\1\u016e\77\0\1\u016f\64\0"+
    "\1\u0170\103\0\1\u0171\73\0\1\u0172\106\0\1\u0173\66\0"+
    "\1\u0174\51\0\1\u0175\117\0\1\u0176\71\0\1\u0177\57\0"+
    "\1\u0178\72\0\1\u0179\106\0\1\u017a\66\0\1\u017b\51\0"+
    "\1\u017c\117\0\1\u017d\56\0\1\u017e\41\0\5\56\1\57"+
    "\36\56\1\u017f\33\56\1\57\22\56\1\u0180\47\56\1\57"+
    "\25\56\1\u0181\44\56\1\u0182\72\56\1\57\17\56\1\u0183"+
    "\52\56\1\57\15\56\2\u0184\46\56\25\0\1\u0185\65\0"+
    "\1\u0186\70\0\1\u0187\72\0\1\u0188\72\0\1\u0189\72\0"+
    "\1\u018a\115\0\1\u018b\60\0\1\u018c\63\0\1\u018d\113\0"+
    "\1\u018e\47\0\1\u018f\77\0\2\u0190\64\0\1\u0191\72\0"+
    "\1\u0192\101\0\1\u0193\75\0\1\u0194\62\0\1\u0195\72\0"+
    "\1\u0196\102\0\1\u0197\67\0\1\u0198\76\0\1\u0199\67\0"+
    "\1\u019a\103\0\1\u019b\64\0\1\u019c\71\0\1\u019d\65\0"+
    "\2\u019e\75\0\1\u019f\72\0\1\u01a0\63\0\1\u01a1\101\0"+
    "\1\u01a2\63\0\1\u01a3\101\0\1\u01a4\72\0\1\u01a5\63\0"+
    "\1\u01a6\72\0\1\u01a7\52\0\5\56\1\57\12\56\1\u01a8"+
    "\57\56\1\57\36\56\1\u01a9\33\56\1\57\12\56\1\u01aa"+
    "\57\56\1\u01ab\72\56\1\57\11\56\1\u01ac\53\56\16\0"+
    "\1\u01ad\1\u01ae\71\0\1\u01af\101\0\1\u01b0\75\0\1\u01b1"+
    "\60\0\1\u01b2\72\0\1\u01b3\74\0\1\u01b4\70\0\1\u01b5"+
    "\1\u01b6\100\0\1\u01b7\63\0\1\u01b8\104\0\1\u01b9\102\0"+
    "\1\u01ba\52\0\1\u01bb\105\0\1\u01bc\70\0\1\u01bd\61\0"+
    "\1\u01be\72\0\1\u01bf\113\0\1\u01c0\56\0\1\u01c1\106\0"+
    "\1\u01c2\50\0\1\u01c3\53\0\5\56\1\u01c4\72\56\1\57"+
    "\17\56\1\u01c5\52\56\1\u01c6\72\56\1\57\17\56\1\u01c7"+
    "\45\56\16\0\1\u01c8\72\0\1\u01c9\1\u01ca\100\0\1\u01cb"+
    "\63\0\1\u01cc\72\0\1\u01cd\72\0\1\u01ce\101\0\1\u01cf"+
    "\74\0\1\u01d0\104\0\1\u01d1\56\0\1\u01d2\65\0\1\u01d3"+
    "\113\0\1\u01d4\72\0\1\u01d5\54\0\2\u01d6\65\0\1\u01d7"+
    "\76\0\2\u01d8\71\0\2\u01d9\46\0\5\56\1\u01da\72\56"+
    "\1\57\36\56\1\u01db\26\56\16\0\1\u01dc\72\0\1\u01dd"+
    "\112\0\1\u01de\75\0\1\u01df\56\0\1\u01e0\1\u01e1\110\0"+
    "\1\u01e2\51\0\2\u01e3\112\0\1\u01e4\46\0\1\u01e5\52\0"+
    "\5\56\1\57\12\56\1\u01e6\52\56\20\0\1\u01e7\72\0"+
    "\1\u01e8\72\0\1\u01e9\72\0\1\u01ea\113\0\1\u01eb\31\0"+
    "\5\56\1\u01ec\65\56\41\0\1\u01ed\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22892];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\17\1\2\11\1\1\12\11\2\1\2\11\2\0\1\11"+
    "\30\0\3\11\3\0\1\11\1\0\1\11\14\0\4\11"+
    "\1\1\114\0\1\11\14\0\1\11\2\0\1\11\2\0"+
    "\1\11\2\0\2\11\2\0\1\11\64\0\2\11\1\0"+
    "\1\11\6\0\2\11\10\0\1\11\1\0\2\11\30\0"+
    "\1\11\2\0\1\11\1\0\1\11\31\0\1\11\2\0"+
    "\1\11\16\0\2\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\10\0\1\11\1\0\1\11\1\0\1\11\4\0"+
    "\1\11\1\0\1\11\5\0\1\11\4\0\4\11\4\0"+
    "\1\11\1\0\2\11\1\1\1\0\1\11\7\0\1\11"+
    "\3\0\3\11\2\0\2\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\2\11\1\0\1\11\1\1\1\0"+
    "\1\11\13\0\1\11\1\0\1\11\1\0\2\11\2\0"+
    "\3\11\2\0\2\11\1\0\2\11\4\0\1\11\1\0"+
    "\2\11\1\0\3\11\5\0\2\11\1\0\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
	//Codigo de Java
	//public static LinkedList<Errores> ListE = new LinkedList<Errores>();
  String cadena = "";
  boolean text = false;

  void agregar_token(String token, int col, int fil, String tipo){
      Tokens dat = new Tokens(token, col, fil, tipo);
      Listas.Token.add(dat);
  }
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public A_Lexico(java.io.Reader in) {
      yyline = 1; 
    yycolumn = 1; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico: "+yytext()+" Linea "+yyline+" Columna "+yycolumn);
                             Errores datos = new Errores(yytext(), yyline, yycolumn,"Error Lexico", "Simbolo no existe");
                             Listas.Errores_Lex.add(datos);
            } 
            // fall through
          case 118: break;
          case 2: 
            { System.out.println("Reconocio " +yytext()+ " numero"); agregar_token(yytext(),yycolumn, yyline,"NUMERO"); return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 3: 
            { System.out.println("Reconocio " +yytext()+ " punto");  agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.punto, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 4: 
            { System.out.println("Reconocio " +yytext()+ " id");  agregar_token(yytext(),yycolumn, yyline,"ID"); return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 5: 
            { /* IGNORAR */
            } 
            // fall through
          case 122: break;
          case 6: 
            { yycolumn=1;
            } 
            // fall through
          case 123: break;
          case 7: 
            { System.out.println("Reconocio" + yytext() + " divicion"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.divicion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 124: break;
          case 8: 
            { System.out.println("Reconocio" + yytext() + " por"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.por,yycolumn,yyline,yytext());
            } 
            // fall through
          case 125: break;
          case 9: 
            { System.out.println("Reconocio " +yytext()+ " menor"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.menorq, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 10: 
            { System.out.println("Reconocio " +yytext()+ " exclama"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.exclama, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 11: 
            { if(text == true){
                                            yybegin(TEXT); cadena = "";
                                          }else{ 
                                            System.out.println("Reconocio " +yytext()+ " mayor"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.mayorq, yycolumn, yyline, yytext());
                                          }
            } 
            // fall through
          case 128: break;
          case 12: 
            { System.out.println("Reconocio " +yytext()+ " interrC"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.interrC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 13: 
            { System.out.println("Reconocio" + yytext() + " mas"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.mas,yycolumn,yyline,yytext());
            } 
            // fall through
          case 130: break;
          case 14: 
            { System.out.println("Reconocio" + yytext() + " menos"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.menos,yycolumn,yyline,yytext());
            } 
            // fall through
          case 131: break;
          case 15: 
            { System.out.println("Reconocio " +yytext()+ " igual"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 16: 
            { System.out.println("Reconocio " +yytext()+ " parentA");  agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.parentA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 17: 
            { System.out.println("Reconocio " +yytext()+ " parentC"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.parentC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 18: 
            { System.out.println("Reconocio " +yytext()+ " llaveA"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.llaveA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 19: 
            { System.out.println("Reconocio " +yytext()+ " llaveC"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.llaveC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 20: 
            { System.out.println("Reconocio " +yytext()+ " corecheA"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.corecheA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 21: 
            { System.out.println("Reconocio " +yytext()+ " corecheC"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.corecheC, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 22: 
            { System.out.println("Reconocio " +yytext()+ " interrA"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.interrA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 23: 
            { System.out.println("Reconocio " +yytext()+ " dosPts"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.dosPts, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          case 24: 
            { System.out.println("Reconocio " +yytext()+ " puntComa"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.puntComa, yycolumn, yyline, yytext());
            } 
            // fall through
          case 141: break;
          case 25: 
            { System.out.println("Reconocio " +yytext()+ " coma"); agregar_token(yytext(),yycolumn, yyline,"SIGNO"); return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            } 
            // fall through
          case 142: break;
          case 26: 
            { cadena += yytext();
            } 
            // fall through
          case 143: break;
          case 27: 
            { yybegin(YYINITIAL); text = false;
                                         System.out.println("Reconocio " + cadena + " texto"); agregar_token(yytext(),yycolumn, yyline,"TEXTO"); return new Symbol(Simbolos.TextoN, yycolumn, yyline, cadena);
            } 
            // fall through
          case 144: break;
          case 28: 
            { System.out.println("Reconocio " +yytext()+ " cadena"); agregar_token(yytext(),yycolumn, yyline,"CADENA"); return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            } 
            // fall through
          case 145: break;
          case 29: 
            { System.out.println("Reconocio " +yytext()+ " menorigual"); agregar_token(yytext(),yycolumn, yyline,"OPERADOR"); return new Symbol(Simbolos.menorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 146: break;
          case 30: 
            { System.out.println("Reconocio " +yytext()+ " diferente"); agregar_token(yytext(),yycolumn, yyline,"OPERADOR"); return new Symbol(Simbolos.diferente, yycolumn, yyline, yytext());
            } 
            // fall through
          case 147: break;
          case 31: 
            { System.out.println("Reconocio " +yytext()+ " mayorigual"); agregar_token(yytext(),yycolumn, yyline,"OPERADOR"); return new Symbol(Simbolos.mayorigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 148: break;
          case 32: 
            { System.out.println("Reconocio " +yytext()+ " tk_If"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_If,yycolumn,yyline,yytext());
            } 
            // fall through
          case 149: break;
          case 33: 
            { System.out.println("Reconocio " +yytext()+ " tk_ID"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_ID,yycolumn,yyline,yytext());
            } 
            // fall through
          case 150: break;
          case 34: 
            { System.out.println("Reconocio " +yytext()+ " tk_HS_C"); agregar_token(yytext(),yycolumn, yyline,"HSCRIPT"); return new Symbol(Simbolos.tk_HS_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 151: break;
          case 35: 
            { System.out.println("Reconocio " +yytext()+ " igualigual"); agregar_token(yytext(),yycolumn, yyline,"OPERADOR"); return new Symbol(Simbolos.igualigual, yycolumn, yyline, yytext());
            } 
            // fall through
          case 152: break;
          case 36: 
            { System.out.println("Reconocio " +yytext()+ " AND"); agregar_token(yytext(),yycolumn, yyline,"OPERADOR"); return new Symbol(Simbolos.AND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 153: break;
          case 37: 
            { System.out.println("Reconocio " +yytext()+ " OR"); agregar_token(yytext(),yycolumn, yyline,"OPERADOR"); return new Symbol(Simbolos.OR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 154: break;
          case 38: 
            { System.out.println("Reconocio " +yytext()+ " decimal"); agregar_token(yytext(),yycolumn, yyline,"DECIMAL"); return new Symbol(Simbolos.decimal, yycolumn, yyline, yytext());
            } 
            // fall through
          case 155: break;
          case 39: 
            { System.out.println("Reconocio " +yytext()+ "E_comentario"); agregar_token(yytext(),yycolumn, yyline,"COMENTARIO"); return new Symbol(Simbolos.Eti_Coment, yycolumn, yyline, yytext());
            } 
            // fall through
          case 156: break;
          case 40: 
            { System.out.println("Reconocio " +yytext()+ " tk_HS_A");  agregar_token(yytext(),yycolumn, yyline,"HSCRIPT"); return new Symbol(Simbolos.tk_HS_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 157: break;
          case 41: 
            { System.out.println("Reconocio " +yytext()+ " tk_Path"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Path,yycolumn,yyline,yytext());
            } 
            // fall through
          case 158: break;
          case 42: 
            { System.out.println("Reconocio " +yytext()+ " tk_Alto"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Alto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 159: break;
          case 43: 
            { System.out.println("Reconocio " +yytext()+ " tk_Echo"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Echo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 160: break;
          case 44: 
            { System.out.println("Reconocio " +yytext()+ " tk_Else"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Else,yycolumn,yyline,yytext());
            } 
            // fall through
          case 161: break;
          case 45: 
            { System.out.println("Reconocio " +yytext()+ " tk_True");  agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_True,yycolumn,yyline,yytext());
            } 
            // fall through
          case 162: break;
          case 46: 
            { System.out.println("Reconocio " +yytext()+ " tk_Ancho"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Ancho,yycolumn,yyline,yytext());
            } 
            // fall through
          case 163: break;
          case 47: 
            { System.out.println("Reconocio " +yytext()+ " tk_Borde"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Borde,yycolumn,yyline,yytext());
            } 
            // fall through
          case 164: break;
          case 48: 
            { System.out.println("Reconocio " +yytext()+ " tk_Texto"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Texto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 165: break;
          case 49: 
            { System.out.println("Reconocio " +yytext()+ " tk_Fondo"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Fondo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 166: break;
          case 50: 
            { System.out.println("Reconocio " +yytext()+ " tk_False"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_False,yycolumn,yyline,yytext());
            } 
            // fall through
          case 167: break;
          case 51: 
            { System.out.println("Reconocio " +yytext()+ " tk_Azul"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Azul,yycolumn,yyline,yytext());
            } 
            // fall through
          case 168: break;
          case 52: 
            { System.out.println("Reconocio " +yytext()+ " tk_Rojo"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Rojo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 169: break;
          case 53: 
            { System.out.println("Reconocio " +yytext()+ " tk_Gris"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Gris,yycolumn,yyline,yytext());
            } 
            // fall through
          case 170: break;
          case 54: 
            { System.out.println("Reconocio " +yytext()+ " tk_Boton_A"); agregar_token(yytext(),yycolumn, yyline,"BOTON"); return new Symbol(Simbolos.tk_Boton_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 171: break;
          case 55: 
            { System.out.println("Reconocio " +yytext()+ " tk_Tabla_A"); agregar_token(yytext(),yycolumn, yyline,"TABLA"); return new Symbol(Simbolos.tk_Tabla_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 172: break;
          case 56: 
            { System.out.println("Reconocio " +yytext()+ " tk_Fila_A"); agregar_token(yytext(),yycolumn, yyline,"FILA"); return new Symbol(Simbolos.tk_Fila_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 173: break;
          case 57: 
            { System.out.println("Reconocio " +yytext()+ " tk_Negro"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Negro,yycolumn,yyline,yytext());
            } 
            // fall through
          case 174: break;
          case 58: 
            { System.out.println("Reconocio " +yytext()+ " tk_Verde"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Verde,yycolumn,yyline,yytext());
            } 
            // fall through
          case 175: break;
          case 59: 
            { System.out.println("Reconocio " +yytext()+ " tk_Fila_C"); agregar_token(yytext(),yycolumn, yyline,"FILA"); return new Symbol(Simbolos.tk_Fila_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 176: break;
          case 60: 
            { System.out.println("Reconocio " +yytext()+ " tk_Compi_A"); agregar_token(yytext(),yycolumn, yyline,"COMPI"); return new Symbol(Simbolos.tk_Compi_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 177: break;
          case 61: 
            { System.out.println("Reconocio " +yytext()+ " tk_Cuerpo_A"); agregar_token(yytext(),yycolumn, yyline,"CUERPO"); return new Symbol(Simbolos.tk_Cuerpo_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 178: break;
          case 62: 
            { System.out.println("Reconocio " +yytext()+ " tk_Imagen_A"); agregar_token(yytext(),yycolumn, yyline,"IMAGEN"); return new Symbol(Simbolos.tk_Imagen_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 179: break;
          case 63: 
            { text = true; System.out.println("Reconocio " +yytext()+ " tk_Titulo_A"); agregar_token(yytext(),yycolumn, yyline,"TITULO"); return new Symbol(Simbolos.tk_Titulo_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 180: break;
          case 64: 
            { text = true; System.out.println("Reconocio " +yytext()+ " tk_TextoA_A"); agregar_token(yytext(),yycolumn, yyline,"TEXTO A"); return new Symbol(Simbolos.tk_TextoA_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 181: break;
          case 65: 
            { text = true; System.out.println("Reconocio " +yytext()+ " tk_TextoB_A"); agregar_token(yytext(),yycolumn, yyline,"TEXTO B"); return new Symbol(Simbolos.tk_TextoB_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 182: break;
          case 66: 
            { System.out.println("Reconocio " +yytext()+ " tk_Repetir"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Repetir,yycolumn,yyline,yytext());
            } 
            // fall through
          case 183: break;
          case 67: 
            { System.out.println("Reconocio " +yytext()+ " tk_SetPath"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_SetPath,yycolumn,yyline,yytext());
            } 
            // fall through
          case 184: break;
          case 68: 
            { System.out.println("Reconocio " +yytext()+ " tk_SetAlto"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_SetAlto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 185: break;
          case 69: 
            { System.out.println("Reconocio " +yytext()+ " tk_GetPath"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_GetPath,yycolumn,yyline,yytext());
            } 
            // fall through
          case 186: break;
          case 70: 
            { System.out.println("Reconocio " +yytext()+ " tk_GetAlto"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_GetAlto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 187: break;
          case 71: 
            { System.out.println("Reconocio " +yytext()+ " tk_Rosado"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Rosado,yycolumn,yyline,yytext());
            } 
            // fall through
          case 188: break;
          case 72: 
            { System.out.println("Reconocio " +yytext()+ " tk_Titulo_C"); agregar_token(yytext(),yycolumn, yyline,"TITULO"); return new Symbol(Simbolos.tk_Titulo_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 189: break;
          case 73: 
            { System.out.println("Reconocio " +yytext()+ " tk_TextoA_C"); agregar_token(yytext(),yycolumn, yyline,"TEXTO A"); return new Symbol(Simbolos.tk_TextoA_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 190: break;
          case 74: 
            { System.out.println("Reconocio " +yytext()+ " tk_TextoB_C"); agregar_token(yytext(),yycolumn, yyline,"TEXTO B"); return new Symbol(Simbolos.tk_TextoB_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 191: break;
          case 75: 
            { System.out.println("Reconocio " +yytext()+ " tk_Compi_C"); agregar_token(yytext(),yycolumn, yyline,"COMPI"); return new Symbol(Simbolos.tk_Compi_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 192: break;
          case 76: 
            { System.out.println("Reconocio " +yytext()+ " tk_Boton_C"); agregar_token(yytext(),yycolumn, yyline,"BOTON"); return new Symbol(Simbolos.tk_Boton_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 193: break;
          case 77: 
            { System.out.println("Reconocio " +yytext()+ " tk_Tabla_C"); agregar_token(yytext(),yycolumn, yyline,"TABLA"); return new Symbol(Simbolos.tk_Tabla_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 194: break;
          case 78: 
            { System.out.println("Reconocio " +yytext()+ " tk_Salto");  agregar_token(yytext(),yycolumn, yyline,"SALTO");return new Symbol(Simbolos.tk_Salto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 195: break;
          case 79: 
            { text = true; System.out.println("Reconocio " +yytext()+ " tk_Columna_A"); agregar_token(yytext(),yycolumn, yyline,"COLUMNA"); return new Symbol(Simbolos.tk_Columna_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 196: break;
          case 80: 
            { text = true; System.out.println("Reconocio " +yytext()+ " tk_Parrafo_A"); agregar_token(yytext(),yycolumn, yyline,"PARRAFO"); return new Symbol(Simbolos.tk_Parrafo_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 197: break;
          case 81: 
            { System.out.println("Reconocio " +yytext()+ " tk_Insertar"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Insertar,yycolumn,yyline,yytext());
            } 
            // fall through
          case 198: break;
          case 82: 
            { System.out.println("Reconocio " +yytext()+ " tk_SetAncho"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_SetAncho,yycolumn,yyline,yytext());
            } 
            // fall through
          case 199: break;
          case 83: 
            { System.out.println("Reconocio " +yytext()+ " tk_SetBorde"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_SetBorde,yycolumn,yyline,yytext());
            } 
            // fall through
          case 200: break;
          case 84: 
            { System.out.println("Reconocio " +yytext()+ " tk_SetTexto"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_SetTexto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 201: break;
          case 85: 
            { System.out.println("Reconocio " +yytext()+ " tk_GetAncho"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_GetAncho,yycolumn,yyline,yytext());
            } 
            // fall through
          case 202: break;
          case 86: 
            { System.out.println("Reconocio " +yytext()+ " tk_GetTexto"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_GetTexto,yycolumn,yyline,yytext());
            } 
            // fall through
          case 203: break;
          case 87: 
            { System.out.println("Reconocio " +yytext()+ " tk_Derecha"); agregar_token(yytext(),yycolumn, yyline,"ALINEACION"); return new Symbol(Simbolos.tk_Derecha,yycolumn,yyline,yytext());
            } 
            // fall through
          case 204: break;
          case 88: 
            { System.out.println("Reconocio " +yytext()+ " tk_Columna_C"); agregar_token(yytext(),yycolumn, yyline,"COLUMNA"); return new Symbol(Simbolos.tk_Columna_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 205: break;
          case 89: 
            { System.out.println("Reconocio " +yytext()+ " tk_Parrafo_C"); agregar_token(yytext(),yycolumn, yyline,"PARRAFO"); return new Symbol(Simbolos.tk_Parrafo_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 206: break;
          case 90: 
            { System.out.println("Reconocio " +yytext()+ " tk_Cuerpo_C"); agregar_token(yytext(),yycolumn, yyline,"CUERPO"); return new Symbol(Simbolos.tk_Cuerpo_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 207: break;
          case 91: 
            { System.out.println("Reconocio " +yytext()+ " tk_Imagen_C"); agregar_token(yytext(),yycolumn, yyline,"IMAGEN"); return new Symbol(Simbolos.tk_Imagen_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 208: break;
          case 92: 
            { System.out.println("Reconocio " +yytext()+ " tk_Columna_A2"); agregar_token(yytext(),yycolumn, yyline,"COLUMNA2"); return new Symbol(Simbolos.tk_Columna_A2,yycolumn,yyline,yytext());
            } 
            // fall through
          case 209: break;
          case 93: 
            { text = true; System.out.println("Reconocio " +yytext()+ " tk_ColumnaC_A"); agregar_token(yytext(),yycolumn, yyline,"COLUMNAC"); return new Symbol(Simbolos.tk_ColumnaC_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 210: break;
          case 94: 
            { System.out.println("Reconocio " +yytext()+ " tk_Espacio_A"); agregar_token(yytext(),yycolumn, yyline,"ESPACIO"); return new Symbol(Simbolos.tk_Espacio_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 211: break;
          case 95: 
            { System.out.println("Reconocio " +yytext()+ " tk_Centrado"); agregar_token(yytext(),yycolumn, yyline,"ALINEACION"); return new Symbol(Simbolos.tk_Centrado,yycolumn,yyline,yytext());
            } 
            // fall through
          case 212: break;
          case 96: 
            { System.out.println("Reconocio " +yytext()+ " tk_Amarillo"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Amarillo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 213: break;
          case 97: 
            { System.out.println("Reconocio " +yytext()+ " tk_ColumnaC_C"); agregar_token(yytext(),yycolumn, yyline,"COLUMNAC"); return new Symbol(Simbolos.tk_ColumnaC_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 214: break;
          case 98: 
            { System.out.println("Reconocio " +yytext()+ " tk_Columna_C2"); agregar_token(yytext(),yycolumn, yyline,"COLUMNA"); return new Symbol(Simbolos.tk_Columna_C2,yycolumn,yyline,yytext());
            } 
            // fall through
          case 215: break;
          case 99: 
            { System.out.println("Reconocio " +yytext()+ " tk_Espacio_C"); agregar_token(yytext(),yycolumn, yyline,"ESPACIO"); return new Symbol(Simbolos.tk_Espacio_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 216: break;
          case 100: 
            { System.out.println("Reconocio " +yytext()+ " tk_ColumnaC_A2"); agregar_token(yytext(),yycolumn, yyline,"COLUMNAC2"); return new Symbol(Simbolos.tk_ColumnaC_A2,yycolumn,yyline,yytext());
            } 
            // fall through
          case 217: break;
          case 101: 
            { System.out.println("Reconocio " +yytext()+ " tk_Cabecera_A"); agregar_token(yytext(),yycolumn, yyline,"CABECERA"); return new Symbol(Simbolos.tk_Cabecera_A,yycolumn,yyline,yytext());
            } 
            // fall through
          case 218: break;
          case 102: 
            { System.out.println("Reconocio " +yytext()+ " tk_CrearBoton"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_CrearBoton,yycolumn,yyline,yytext());
            } 
            // fall through
          case 219: break;
          case 103: 
            { System.out.println("Reconocio " +yytext()+ " tk_CrearTabla"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_CrearTabla,yycolumn,yyline,yytext());
            } 
            // fall through
          case 220: break;
          case 104: 
            { System.out.println("Reconocio " +yytext()+ " tk_ClickBoton"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_ClickBoton,yycolumn,yyline,yytext());
            } 
            // fall through
          case 221: break;
          case 105: 
            { System.out.println("Reconocio " +yytext()+ " tk_Alineacion"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_Alineacion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 222: break;
          case 106: 
            { System.out.println("Reconocio " +yytext()+ " tk_Izquierda"); agregar_token(yytext(),yycolumn, yyline,"ALINEACION"); return new Symbol(Simbolos.tk_Izquierda,yycolumn,yyline,yytext());
            } 
            // fall through
          case 223: break;
          case 107: 
            { System.out.println("Reconocio " +yytext()+ " tk_ColumnaC_C2"); agregar_token(yytext(),yycolumn, yyline,"COLUMNAC"); return new Symbol(Simbolos.tk_ColumnaC_C2,yycolumn,yyline,yytext());
            } 
            // fall through
          case 224: break;
          case 108: 
            { System.out.println("Reconocio " +yytext()+ " tk_Cabecera_C"); agregar_token(yytext(),yycolumn, yyline,"CABECERA"); return new Symbol(Simbolos.tk_Cabecera_C,yycolumn,yyline,yytext());
            } 
            // fall through
          case 225: break;
          case 109: 
            { System.out.println("Reconocio " +yytext()+ " tk_CrearImagen"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_CrearImagen,yycolumn,yyline,yytext());
            } 
            // fall through
          case 226: break;
          case 110: 
            { System.out.println("Reconocio " +yytext()+ " tk_CrearTextoA"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_CrearTextoA,yycolumn,yyline,yytext());
            } 
            // fall through
          case 227: break;
          case 111: 
            { System.out.println("Reconocio " +yytext()+ " tk_CrearTextoB");  agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_CrearTextoB,yycolumn,yyline,yytext());
            } 
            // fall through
          case 228: break;
          case 112: 
            { System.out.println("Reconocio " +yytext()+ " tk_CrearParrafo"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_CrearParrafo,yycolumn,yyline,yytext());
            } 
            // fall through
          case 229: break;
          case 113: 
            { System.out.println("Reconocio " +yytext()+ " tk_SetContenido"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_SetContenido,yycolumn,yyline,yytext());
            } 
            // fall through
          case 230: break;
          case 114: 
            { System.out.println("Reconocio " +yytext()+ " tk_GetContenido"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_GetContenido,yycolumn,yyline,yytext());
            } 
            // fall through
          case 231: break;
          case 115: 
            { System.out.println("Reconocio " +yytext()+ " tk_GetAlineacion"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_GetAlineacion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 232: break;
          case 116: 
            { System.out.println("Reconocio " +yytext()+ " tk_Justificado"); agregar_token(yytext(),yycolumn, yyline,"ALINEACION"); return new Symbol(Simbolos.tk_Justificado,yycolumn,yyline,yytext());
            } 
            // fall through
          case 233: break;
          case 117: 
            { System.out.println("Reconocio " +yytext()+ " tk_SetAlineacion"); agregar_token(yytext(),yycolumn, yyline,"PALABRA RESERVADA"); return new Symbol(Simbolos.tk_SetAlineacion,yycolumn,yyline,yytext());
            } 
            // fall through
          case 234: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
